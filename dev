#include "Coder.h"

void    muttableCaesar(char* str, int key){
    int i; 
    char ch;

    for (i = 0; str[i] != '\0'; ++i){
        ch = str[i];

        if(ch >= 'a' && ch <= 'z'){
            if (ch + key < 'z'){
                ch = ch + key;
            }

            else if (ch + key > 'z'){
                ch = 'a' + (ch + key) % ('z' - 'a' + 1);
            }

            else if (ch + key < 'a'){
                ch = 'z' - ('a' % ch) + 1;
            }
        }
        str[i] = ch;
    }
}

char*   immutableCaesar(const char* str, int key){
    char* res = malloc((strlen(str) + 1) * sizeof(char));
    strcpy(res, str);
    muttableCaesar(res, key);
    return res;
}

void    muttableXor(char* str, char* key){
    for (int i = 0; str[i] != '\0'; ++i){
        str[i] = str[i] ^ key[i % strlen(key)];
    }
}

char*   immutableXor(const char* str, char* key){
    char* res = malloc((strlen(str) + 1) * sizeof(char));
    strcpy(res, str);
    muttableXor(res, key);

    return res;

}

#include <string.h>
#include <stdlib.h>
void    muttableCaesar(char* str, int key);
char*   immutableCaesar(const char* str, int key);
char*   immutableXor(const char* str, char* key);
void	muttableXor(char* str, char* key);

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "Coder.h"
#include "ToLine.h"

int main(int argc, char* argv[]){
    char* cipher = argv[1];
    char* str = argv[2];
    char* key = argv[3];

    if (strcmp(cipher, "--caesar") == 0){
        if (ifNumber(key)){
            int pass = atoi(key) * (-1);
            muttableCaesar(str, pass);
            printf("%s\n", str);
        }

        else{
            printf("The key must be a number\n");
        }
    }

    else if (strcmp(cipher, "--xor") == 0){
        if (ifLetter(key)){
            muttableXor(str, key);
            printf("%s\n", str);
        }

        else{
            printf("The key must consist of letters\n");
        }
    }

    else{
        printf("Wrong entry of the cipher\n");
    }
}

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "Coder.h"
#include "ToLine.h"

int main(int argc, char* argv[]){
    char* cipher = argv[1];
    char* str = argv[2];
    char* key = argv[3];

    if (strcmp(cipher, "--caesar") == 0){
        if (ifNumber(key)){
            muttableLastSpace(str);
            muttableLower(str);
            muttableCaesar(str, atoi(key));
            printf("%s\n", str);
        }

        else{
            printf("The key must be a number\n");
        }
    }

    else if (strcmp(cipher, "--xor") == 0){
        if (ifLetter(key)){
            muttableLastSpace(str);
            muttableLower(str);
            muttableXor(str, key);
            printf("%s\n", str);
        }
        
        else{
            printf("The key must consist of letters\n");
        }
    }

    else{
        printf("Wrong entry of the cipher\n");
    }

    return 0;
}

SOURCES = mainDecoded.c
FORLIBRARY = Coder.o ToLine.o
LIBRARY = libCod.so
TARGET = decoded

all: $(TARGET)

$(TARGET): mainDecoded.o libCod.so
	gcc mainDecoded.o -o $(TARGET) -std=c99 -L. -lCod -Wl,-rpath,.

mainDecoded.o: $(SOURCES)
	gcc $< -c -o $@ -std=c99

$(LIBRARY): $(FORLIBRARY)
	gcc Coder.o ToLine.o  -shared -o $(LIBRARY)

Coder.o: Coder.c
	gcc -c -fPIC $< -std=c99

ToLine.o: ToLine.c
	gcc $< -c -o $@ -std=c99

clean:
	rm -f *.o *.so $(TARGET)

SOURCES = mainDecoded.c
FORLIBRARY = Coder.o ToLine.o
LIBRARY = libString.a
TARGET = decoded

all: $(TARGET)

$(TARGET): mainDecoded.o libString.a
	gcc mainDecoded.o -o $(TARGET) -std=c99 -L. -lString

mainDecoded.o: $(SOURCES)
	gcc $< -c -o $@ -std=c99

$(LIBRARY): $(FORLIBRARY)
	ar cr $(LIBRARY) Coder.o ToLine.o

Coder.o: Coder.c
	gcc $< -c -o $@ -std=c99

ToLine.o: ToLine.c
	gcc $< -c -o $@ -std=c99

clean:
	rm -f *.o *.a $(TARGET)

SOURCES = mainEncoder.c
FORLIBRARY = Coder.o ToLine.o
LIBRARY = libCod.so
TARGET = encoder

all: $(TARGET)

$(TARGET): mainEncoder.o libCod.so
	gcc mainEncoder.o -o $(TARGET) -std=c99 -L. -lCod -Wl,-rpath,.

mainEncoder.o: $(SOURCES)
	gcc $< -c -o $@ -std=c99

$(LIBRARY): $(FORLIBRARY)
	gcc Coder.o ToLine.o -shared -o $(LIBRARY)

Coder.o: Coder.c
	gcc -c -fPIC $< -std=c99

ToLine.o: ToLine.c
	gcc $< -c -o $@ -std=c99

clean:
	rm -f *.o *.so $(TARGET)

SOURCES = mainEncoder.c
FORLIBRARY = Coder.o ToLine.o
LIBRARY = libString.a
TARGET = encoder

all: $(TARGET)

$(TARGET): mainEncoder.o libString.a
	gcc mainEncoder.o -o $(TARGET) -std=c99 -L. -lString

mainEncoder.o: mainEncoder.c
	gcc $< -c -o $@ -std=c99

$(LIBRARY): $(FORLIBRARY)
	ar cr $(LIBRARY) Coder.o ToLine.o

Coder.o: Coder.c
	gcc $< -c -o $@ -std=c99

ToLine.o: ToLine.c
	gcc $< -c -o $@ -std=c99

clean:
	rm -f *.o *.a $(TARGET)

#include "ToLine.h"

void    muttableUpper(char* str){
    while (*str){
        if ('a' <= *str && *str <= 'z'){
            *str += 'A' - 'a';
        }
        ++str;
    }
}

char*   immutableUpper(const char* str){
    char* res = malloc((strlen(str) + 1) * sizeof(char));
    strcpy(res, str);
    muttableUpper(res);
    return res;
}

void    muttableLower(char* str){
    while (*str){

        if ('A' <= *str && *str <= 'Z'){
            *str += 'a' - 'A';
        }
        ++str;
    }
}

char*   immuttableLower(const char* str){
    char* res = malloc((strlen(str) + 1) * sizeof(char));
    strcpy(res, str);
    muttableLower(res);
    return res;
}

void    muttableLastSpace(char str[]){
    int first = 0;
    int last = strlen(str) - 1;

    while(str[first] == ' '){
        ++first;
    }

    while(str[last] == ' '){
        --last;
    }
     str[last + 1] = '\0';
    
    int len = last - first + 1;

    for (int i = 0; i <= len; ++i){
        str[i] = str[i + first];
    }

    str[len] = '\0';
}

char*   immutableLastSpace(const char* str){
    char* res = malloc((strlen(str) + 1) * sizeof(char));
    strcpy(res, str);
    muttableLastSpace(res);
    return res;
}

void    muttableFilterSpace(char str[]){
    int j = 0;
    for (int i = j = 0; str[i] != '\0'; ++i){

        if (str[i] != ' '){
            str[j] = str[i];
            ++j;
        }
        
    str[j] = '\0';
    }
}

char*   immutableFilterSpace(const char* str){
    char* res = malloc((strlen(str) + 1) * sizeof(char));
    strcpy(res, str);
    muttableFilterSpace(res);
    return res;
}

void    muttableFilter(char str[]){
    int k = 0;

    for (int i = 0; str[i] != '\0'; ++i){

        if (str[i] == ' ' || str[i] >= 'a' && str[i] <= 'z' 
        || str[i] >= 'A' && str[i] <= 'Z' 
        || str[i] >= '0' && str[i] <= '9'){
            str[k] = str[i];
            ++k;
        }
   }

   str[k] = '\0';
}

char*   immutableFilter(const char* str){
    char* res = malloc((strlen(str) + 1) * sizeof(char));
    strcpy(res, str);
    muttableFilter(res);
    return res;
}

int     ifLetter(char* str){
    int bul;

    while (*str){

        if (*str >= 'A' && *str <= 'Z' || *str >= 'a' && *str <= 'z' || *str == ' '){
            bul = 1;
        }

        else{
            bul = 0;
            return bul;
        }

        ++str;
    }

    return bul;
}

int     ifNumber(char* str){
    int bul;

    while (*str){

        if (*str >= '0' && *str <= '9' || str[0] == '-'){
            bul = 1;
        }

        else{
            bul = 0;
            return bul;
        }
            ++str;
    }

    return bul;
}

#include <string.h>
#include <stdlib.h>
void    muttableUpper(char* str);
char*   immutableUpper(const char* str);
void    muttableLower(char* str);
char*   immuttableLower(const char* str);
void    muttableLastSpace(char str[]);
char*   immutableLastSpace(const char* str);
void    muttableFilterSpace(char str[]);
char*   immutableFilterSpace(const char* str);
void    muttableFilter(char str[]);
char*   immutableFilter(const char* str);
int     ifLetter(char* str);
int     ifNumber(char* str);

# Auto detect text files and perform LF normalization
* text=auto
